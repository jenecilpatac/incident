name: Deploy Next.js site to Pages

on:
  push:
    branches: ["main"]  # Trigger when pushing to the main branch
  workflow_dispatch:  # Allow manual trigger from the GitHub UI

permissions:
  contents: read
  pages: write
  id-token: write  # Required for GitHub Pages deployment

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        working-directory: client
        run: pnpm install

      - name: Build with Next.js
        working-directory: client
        run: pnpm build  # Generates the .next folder

      - name: Upload Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: client/.next  # Path to the build output directory

  deploy:
     runs-on: ubuntu-latest
     needs: build
     steps:
       - name: Checkout repository
         uses: actions/checkout@v3
         
       - name: Deploy to server
         run: |
           ssh webserver@webserver 'cd /home/webserver/systems/incident/client && git pull origin main && docker-compose down && docker-compose up --build -d'

  # deploy:
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}  # Output page URL after deployment
  #   runs-on: ubuntu-latest
  #   needs: build  # Ensure the build step is completed before deployment

  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
  #       with:
  #         artifact_id: ${{ steps.upload-artifact.outputs.artifact_id }}  # Pass the artifact ID


    # steps:
    #   # Step 1: Checkout the code
    #   - name: Checkout Code
    #     uses: actions/checkout@v3

    #   # Step 2: Debug Directory Structure (Optional)
    #   - name: Debug Directory Structure
    #     run: ls -la
    #     shell: bash

    #   # Step 3: Setup Node.js environment
    #   - name: Set up Node.js
    #     uses: actions/setup-node@v3
    #     with:
    #       node-version: 18 # Specify your Node.js version

    #   # Step 4: Install dependencies
    #   - name: Install Dependencies
    #     run: |
    #       npm install -g pnpm
    #       pnpm install
    #     working-directory: ./client # Use if your `package.json` is in a subdirectory like `frontend`

    #   # Step 5: Run TypeScript type checking
    #   - name: Run Type Check
    #     run: pnpm run typecheck # or tsc --noEmit to check types without outputting JS
    #     working-directory: ./client

    #   # Step 6: Lint the code
    #   - name: Run Lint
    #     run: pnpm run lint
    #     working-directory: ./client # Adjust for your directory structure

    #   # Step 7: Build the application
    #   - name: Build Application
    #     run: pnpm run build
    #     working-directory: ./client # Adjust for your directory structure


      #  Step 8: Set up SSH and Docker for deployment
      # - name: Set up SSH
      #   uses: appleboy/ssh-action@v0.1.5
      #   with:
      #     host: ${{ secrets.HOST }}  # Ubuntu server IP or domain
      #     username: ${{ secrets.USERNAME }}  # SSH username
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}  # SSH private key (add it in GitHub secrets)
      #     port: 22  # SSH port, 22 by default
      #     script: |
      #       # Step 3: Pull the latest changes on the server
      #       cd /home/webserver/systems/incident/client  # Change this to the directory of your project on the server
      #       git pull  # Pull the latest changes from the main branch

      #       # Step 4: Build and restart the Docker containers using Docker Compose
      #       docker-compose down  # Stop and remove the current containers
      #       docker-compose up --build -d  # Build and start the containers in detached mode
